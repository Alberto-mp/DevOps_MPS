name: Java Tests and SonarCloud Analysis

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test-and-analyze:
    runs-on: ubuntu-latest

    steps:
    # 1. Checkout del código
    - name: Checkout repository
      uses: actions/checkout@v3

    # 2. Configuración del entorno Java
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'zulu'

    # 3. Limpiar la caché de Maven (opcional)
    - name: Clear Maven Cache
      run: rm -rf ~/.m2/repository

    # 4. Eliminar manualmente el directorio target
    - name: Remove Target Directory
      run: rm -rf target

    # 5. Caché para dependencias Maven
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-m2
    # 6. Caché para dependencias de SonarQube
    - name: Cache SonarQube packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    # 9. Limpieza y compilación
    - name: Clean and Compile
      run: mvn clean compile

    # 10. Ejecutar análisis en SonarCloud
    - name: Run SonarCloud Analysis
      if: always()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
          -Dsonar.projectKey=Alberto-mp_DevOps_MPS \
          -Dsonar.organization=alberto-mp \
          -Dsonar.host.url=https://sonarcloud.io

    # 7. Ejecutar los tests dentro de Docker
    - name: Run tests in Docker
      id: test
      run: |
        docker run --rm \
          -u $(id -u):$(id -g) \  # Ejecutar como usuario actual
          -v "$PWD":/usr/src/app \
          -w /usr/src/app \
          maven:3.8.5-openjdk-17 mvn clean test
      continue-on-error: true

    # 8. Crear tarjeta en Trello si los tests fallan
    - name: Create Trello card on failure
      if: ${{ steps.test.outcome == 'failure' }}
      run: |
        curl -X POST "https://api.trello.com/1/cards" \
          -d "key=4adca9d33a83ad8b790803a2708d4ed2" \
          -d "token=ATTA4044abed2ee17b8d8aa75c30a70dbdaf1b0e258c568c0ad6f1124772570f0b3d592801CF" \
          -d "idList=674a3f456fa1777794ac97ce" \
          -d "name=Tests fallaron en GitHub Actions" \
          -d "desc=Los tests fallaron en el último push. Revisa el workflow en GitHub."
    